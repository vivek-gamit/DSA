//Given an array of integers and a number k, find the maximum sum of any contiguous subarray of size k.

#include <iostream>
#include <vector>
using namespace std;

int maxSumSubarrayOfSizeK(vector<int> &arr, int k) {
    int n = arr.size();
    if(n < k) return -1;

    int windowsum = 0;
    for(int i=0; i<k; i++){
        windowsum += arr[i];
    }

    int maxsum = windowsum;

    for(int i = k; i<n; i++){
        windowsum += arr[i] - arr[i-k];
        maxsum = max(maxsum,windowsum);
    }

    return maxsum;
}

int main() {
    vector<int> arr = {2, 1, 6, 1, 3, 2};
    int k = 3;

    int result = maxSumSubarrayOfSizeK(arr, k);
    cout << "Maximum sum of subarray of size " << k << " is: " << result << endl;

    return 0;
}
